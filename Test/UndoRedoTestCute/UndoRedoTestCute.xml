<testsuites>
	<testsuite name="UndoRedoStack" tests="9">
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::DoIt"/>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::DoItWithException">
			<failure message="..\src\UndoRedoStackTest.cpp:43 DoItWithException: false == urMngr.isUndoable() expected:	0	but was:	1	">
DoItWithException: false == urMngr.isUndoable() expected:	0	but was:	1	
			</failure>
		</testcase>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::Undo">
			<failure message="..\src\UndoRedoStackTest.cpp:59 Undo: false == urMngr.isRedoable() expected:	0	but was:	1	">
Undo: false == urMngr.isRedoable() expected:	0	but was:	1	
			</failure>
		</testcase>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::UndoWithException">
			<failure message="..\src\UndoRedoStackTest.cpp:73 UndoWithException: expected == result expected:	3	but was:	0	">
UndoWithException: expected == result expected:	3	but was:	0	
			</failure>
		</testcase>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::Redo">
			<failure message="..\src\UndoRedoStackTest.cpp:90 Redo: expected == result expected:	3	but was:	0	">
Redo: expected == result expected:	3	but was:	0	
			</failure>
		</testcase>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::RedoWithException"/>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::DoItExceptionNeutral"/>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::UndoExceptionNeutral">
			<failure message="..\src\UndoRedoStackTest.cpp:132 &quot; expecting &quot; &quot;urMngr.undo()&quot; &quot; to throw &quot; &quot;std::logic_error&quot;">
&quot; expecting &quot; &quot;urMngr.undo()&quot; &quot; to throw &quot; &quot;std::logic_error&quot;
			</failure>
		</testcase>
		<testcase classname="UndoRedoStack" name="UndoRedoStackTest::RedoExceptionNeutral"/>
	</testsuite>
	<testsuite name="UndoRedoManager" tests="9">
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::IsModifiedSimple"/>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::IsModifiedAndIsRedoableWithNewCommand"/>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::ResetModified"/>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::IsModifiedtwithExceptionDoIt">
			<failure message="..\src\UndoRedoManagerTest.cpp:83 IsModifiedtwithExceptionDoIt: false == urMngr.isModified() expected:	0	but was:	1	">
IsModifiedtwithExceptionDoIt: false == urMngr.isModified() expected:	0	but was:	1	
			</failure>
		</testcase>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::IsModifiedtwithExceptionUndo">
			<failure message="..\src\UndoRedoManagerTest.cpp:105 IsModifiedtwithExceptionUndo: true == urMngr.isModified() expected:	1	but was:	0	">
IsModifiedtwithExceptionUndo: true == urMngr.isModified() expected:	1	but was:	0	
			</failure>
		</testcase>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::IsModifiedtwithExceptionRedo">
			<failure message="..\src\UndoRedoManagerTest.cpp:132 IsModifiedtwithExceptionRedo: false == urMngr.isModified() expected:	0	but was:	1	">
IsModifiedtwithExceptionRedo: false == urMngr.isModified() expected:	0	but was:	1	
			</failure>
		</testcase>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::DoItExceptionNeutral"/>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::RedoExceptionNeutral"/>
		<testcase classname="UndoRedoManager" name="UndoRedoManagerTest::UndoExceptionNeutral">
			<failure message="..\src\UndoRedoManagerTest.cpp:155 &quot;Command throws but Manager not!&quot;">
&quot;Command throws but Manager not!&quot;
			</failure>
		</testcase>
	</testsuite>
</testsuites>
